# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MicroController {
  """Micro controller ID"""
  id: ID!

  """The micro controller's friendly name"""
  name: String

  """IP address of the micro controller"""
  ipAddress: String

  """Describes if the micro controller is online and active"""
  online: Boolean!

  """Describes if the micro controller is online and active"""
  lastBoot: DateTime

  """ID of the config this controller should respect"""
  configId: String!

  """Config for the micro controller"""
  config: Config
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Config {
  """Config ID"""
  id: ID!

  """Describes how often the controller should send sensor updates"""
  soilSensorUpdateIntervalMs: Float!

  """Describes how often the controller should send sensor updates"""
  createdAt: DateTime!
}

type SensorReading {
  """Sensor Reading ID"""
  id: ID!

  """The ID of the sensor from which this reading came"""
  sensorId: ID!

  """When this reading was created"""
  createdAt: DateTime!

  """The actual sensor reading"""
  reading: Float!
}

type Sensor {
  """Sensor ID"""
  id: ID!

  """Zone ID for which this sensor resides"""
  zoneId: ID!

  """The type of sensor"""
  type: SensorType!
  readings(skip: Int, take: Int!): [SensorReading!]
}

enum SensorType {
  moisture
}

type Solenoid {
  """ID of the Solenoid"""
  id: ID!

  """Zone ID for which this solenoid resides"""
  zoneId: ID!

  """Solenoid state"""
  state: SolenoidState!
}

enum SolenoidState {
  on
  off
  forced_on
  forced_off
}

type Zone {
  """Zone ID"""
  id: ID!

  """Controller ID for which this zone is controlled by"""
  controllerId: ID!
  sensors: [Sensor!]!
  solenoids: [Solenoid!]!
  controller: MicroController!
}

type Query {
  zones: [Zone!]!
}

type Mutation {
  controllerHeartbeat(controllerHeartbeatInput: ControllerHeartbeatInput!): MicroController!
  sensorReading(sensorReadingInput: SensorReadingInput!): SensorReading!
}

input ControllerHeartbeatInput {
  id: ID!
}

input SensorReadingInput {
  sensorId: ID!
  reading: Int!
}
