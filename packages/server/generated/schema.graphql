# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MicroController {
  """Micro controller ID"""
  id: ID!

  """The micro controller's friendly name"""
  name: String!

  """IP address of the micro controller"""
  ipAddress: String

  """Describes if the micro controller is online and active"""
  online: Boolean!

  """Describes if the micro controller is online and active"""
  lastBoot: DateTime

  """ID of the config this controller should respect"""
  configId: String!

  """Config for the micro controller"""
  config: Config
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DevMode {
  enabled: Boolean!
  ipAddress: String!
}

type Config {
  """Config ID"""
  id: ID!

  """Describes how often the controller should send sensor updates"""
  soilSensorUpdateIntervalMs: Float!

  """Describes how often the controller should send battery updates"""
  controllerBatteryVoltageUpdateIntervalMs: Float!
  devMode: DevMode!

  """Describes how often the controller should send sensor updates"""
  createdAt: DateTime!
}

type SensorReading {
  """Sensor Reading ID"""
  id: ID!

  """The ID of the sensor from which this reading came"""
  sensorId: ID!

  """When this reading was created"""
  createdAt: DateTime!

  """The actual sensor reading"""
  reading: Float!
}

type Sensor {
  """Sensor ID"""
  id: ID!

  """Zone ID for which this sensor resides"""
  zoneId: ID!

  """The type of sensor"""
  type: SensorType!
  readings(skip: Int, take: Int!): [SensorReading!]
}

enum SensorType {
  moisture
}

type Solenoid {
  """ID of the Solenoid"""
  id: ID!

  """Zone ID for which this solenoid resides"""
  zoneId: ID!

  """
  Describes if the solenoid is being controlled manually or automatically
  """
  controlMode: SolenoidControlMode!

  """Describes if the solenoid is open or closed or not"""
  open: Boolean!
  name: String!
}

enum SolenoidControlMode {
  auto
  physical
  client
}

type Zone {
  """Zone ID"""
  id: ID!

  """Controller ID for which this zone is controlled by"""
  controllerId: ID!

  """Friendly name of the zone"""
  name: String!
  sensors: [Sensor!]!
  solenoids: [Solenoid!]!
  controller: MicroController!

  """Irrigation jobs for a given zone"""
  irrigationJobs(take: Float!, skip: Float = 0, active: Boolean): [IrrigationJob!]!
}

type IrrigationJob {
  """Job ID"""
  id: ID!

  """The ID of the zone this job is for"""
  zoneId: ID!

  """Whether or not the job is active"""
  active: Boolean!

  """Describes when the job started"""
  start: DateTime!

  """Describes when the job should end"""
  end: DateTime!
}

type ZoneIrrigationListItem {
  zoneId: ID!
  name: String!
}

type ZoneIrrigationList {
  physical: [ZoneIrrigationListItem!]!
  smart: [ZoneIrrigationListItem!]!
  client: [ZoneIrrigationListItem!]!
}

type Query {
  zone(id: ID!): Zone!
  zones: [Zone!]!
  irrigationSummary: ZoneIrrigationList!
}

type Mutation {
  controllerHeartbeat(controllerHeartbeatInput: ControllerHeartbeatInput!): MicroController!
  controllerVoltageReading(controllerVoltageReadingInput: ControllerVoltageReadingInput!): Boolean!
  sensorReading(sensorReadingInput: SensorReadingInput!): SensorReading!
  updateSolenoidFromClient(updateSolenoidFromClientInput: UpdateSolenoidFromClientInput!): Solenoid!
  updateSolenoidFromMicroController(updateSolenoidFromMicroControllerInput: UpdateSolenoidFromMicroControllerInput!): Solenoid!
}

input ControllerHeartbeatInput {
  id: ID!
}

input ControllerVoltageReadingInput {
  controllerId: ID!
  volts: Float!
}

input SensorReadingInput {
  sensorId: ID!
  reading: Int!
}

input UpdateSolenoidFromClientInput {
  solenoidId: ID!
  open: Boolean!
  zoneId: ID!
  mode: SolenoidClientControlModes!
}

enum SolenoidClientControlModes {
  client
  auto
}

input UpdateSolenoidFromMicroControllerInput {
  solenoidId: ID!
  open: Boolean!
  controllerId: ID!
  mode: SolenoidMicroControllerControlModes!
}

enum SolenoidMicroControllerControlModes {
  physical
  auto
}
