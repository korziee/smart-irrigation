generator client {
  provider = "prisma-client-js"
  output   = "./prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model config {
  soil_sensor_update_interval_ms Int
  last_changed                   DateTime? @default(now()) @db.Timestamp(6)

  @@ignore
}

model controller {
  controller_id String    @id @db.VarChar
  friendly_name String?   @db.VarChar
  ip_address    String?   @db.VarChar
  online        Boolean?  @default(false)
  last_boot     DateTime? @db.Timestamp(6)
  zone          zone[]
}

model sensor {
  sensor_id      String           @id @db.VarChar
  zone_id        String           @db.VarChar
  type           sensor_type
  zone           zone             @relation(fields: [zone_id], references: [zone_id], onDelete: NoAction, onUpdate: NoAction)
  sensor_reading sensor_reading[]
}

model sensor_reading {
  sensor_reading_id String   @id @db.VarChar
  sensor_id         String   @db.VarChar
  timestamp         DateTime @default(now()) @db.Timestamp(6)
  reading           Float
  sensor            sensor   @relation(fields: [sensor_id], references: [sensor_id], onDelete: NoAction, onUpdate: NoAction)
}

model solenoid {
  solenoid_id String         @id @db.VarChar
  zone_id     String         @db.VarChar
  state       solenoid_state @default(off)
  zone        zone           @relation(fields: [zone_id], references: [zone_id], onDelete: NoAction, onUpdate: NoAction)
}

model zone {
  zone_id       String     @id @db.VarChar
  zone_name     String?    @db.VarChar
  controller_id String     @db.VarChar
  controller    controller @relation(fields: [controller_id], references: [controller_id], onDelete: NoAction, onUpdate: NoAction)
  sensor        sensor[]
  solenoid      solenoid[]
}

enum sensor_type {
  moisture
}

enum solenoid_state {
  on
  off
  forced_on
  forced_off
}
